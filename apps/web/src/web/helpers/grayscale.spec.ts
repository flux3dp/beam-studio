import grayscale from './grayscale';

describe('test grayscale', () => {
  describe('is binary', () => {
    test('high threshold', () => {
      const result = grayscale([
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255,
      ], {
        is_binary: true,
        is_rgba: true,
        is_shading: false,
        threshold: 128,
        is_svg: false,
      });
      const expected = [
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255];
      expect(result.length).toEqual(expected.length);

      for (let i = 0; i < expected.length; i += 1) {
        expect(expected[i] === result[i]).toBeTruthy();
      }
    });

    test('low threshold', () => {
      const result = grayscale([
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255,
      ], {
        is_binary: true,
        is_rgba: true,
        is_shading: false,
        threshold: 8,
        is_svg: false,
      });
      const expected = [
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255];
      expect(result.length).toEqual(expected.length);

      for (let i = 0; i < expected.length; i += 1) {
        expect(expected[i] === result[i]).toBeTruthy();
      }
    });
  });

  describe('is not binary', () => {
    test('is not shading', () => {
      const result = grayscale([
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255,
      ], {
        is_binary: false,
        is_rgba: true,
        is_shading: false,
        threshold: 128,
        is_svg: false,
      });
      const expected = [
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255,
        0, 0, 0, 255];
      expect(result.length).toEqual(expected.length);

      for (let i = 0; i < expected.length; i += 1) {
        expect(expected[i] === result[i]).toBeTruthy();
      }
    });

    test('is shading', () => {
      const result = grayscale([
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255,
      ], {
        is_binary: false,
        is_rgba: true,
        is_shading: true,
        threshold: 128,
        is_svg: false,
      });
      const expected = [
        16, 16, 16, 255, 16, 16, 16, 255, 16, 16, 16, 255,
        16, 16, 16, 255, 16, 16, 16, 255, 16, 16, 16, 255,
        16, 16, 16, 255, 16, 16, 16, 255, 16, 16, 16, 255,
        16, 16, 16, 255, 16, 16, 16, 255, 16, 16, 16, 255,
        16, 16, 16, 255, 16, 16, 16, 255, 16, 16, 16, 255,
        16, 16, 16, 255, 16, 16, 16, 255, 16, 16, 16, 255,
        16, 16, 16, 255, 16, 16, 16, 255, 16, 16, 16, 255,
        16, 16, 16, 255, 16, 16, 16, 255, 16, 16, 16, 255,
        16, 16, 16, 255];
      expect(result.length).toEqual(expected.length);

      for (let i = 0; i < expected.length; i += 1) {
        expect(expected[i] === result[i]).toBeTruthy();
      }
    });

    test('low threshold', () => {
      const result = grayscale([
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255, 13, 17, 22, 255, 13, 17, 22, 255,
        13, 17, 22, 255,
      ], {
        is_binary: false,
        is_rgba: true,
        is_shading: false,
        threshold: 8,
        is_svg: false,
      });
      const expected = [
        255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0,
        255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0,
        255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0,
        255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0,
        255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0,
        255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0,
        255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0,
        255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0,
        255, 255, 255, 0];
      expect(result.length).toEqual(expected.length);

      for (let i = 0; i < expected.length; i += 1) {
        expect(expected[i] === result[i]).toBeTruthy();
      }
    });
  });
});
